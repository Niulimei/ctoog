// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PingWorkerHandlerFunc turns a function with the right signature into a ping worker handler
type PingWorkerHandlerFunc func(PingWorkerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PingWorkerHandlerFunc) Handle(params PingWorkerParams) middleware.Responder {
	return fn(params)
}

// PingWorkerHandler interface for that can handle valid ping worker params
type PingWorkerHandler interface {
	Handle(PingWorkerParams) middleware.Responder
}

// NewPingWorker creates a new http.Handler for the ping worker operation
func NewPingWorker(ctx *middleware.Context, handler PingWorkerHandler) *PingWorker {
	return &PingWorker{Context: ctx, Handler: handler}
}

/* PingWorker swagger:route POST /workers pingWorker

worker注册和心跳

*/
type PingWorker struct {
	Context *middleware.Context
	Handler PingWorkerHandler
}

func (o *PingWorker) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPingWorkerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
