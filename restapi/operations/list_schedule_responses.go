// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"ctgb/models"
)

// ListScheduleOKCode is the HTTP code returned for type ListScheduleOK
const ListScheduleOKCode int = 200

/*ListScheduleOK 定时任务列表

swagger:response listScheduleOK
*/
type ListScheduleOK struct {

	/*
	  In: Body
	*/
	Payload *models.SchedulePageInfoModel `json:"body,omitempty"`
}

// NewListScheduleOK creates ListScheduleOK with default headers values
func NewListScheduleOK() *ListScheduleOK {

	return &ListScheduleOK{}
}

// WithPayload adds the payload to the list schedule o k response
func (o *ListScheduleOK) WithPayload(payload *models.SchedulePageInfoModel) *ListScheduleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedule o k response
func (o *ListScheduleOK) SetPayload(payload *models.SchedulePageInfoModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScheduleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListScheduleInternalServerErrorCode is the HTTP code returned for type ListScheduleInternalServerError
const ListScheduleInternalServerErrorCode int = 500

/*ListScheduleInternalServerError 内部错误

swagger:response listScheduleInternalServerError
*/
type ListScheduleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewListScheduleInternalServerError creates ListScheduleInternalServerError with default headers values
func NewListScheduleInternalServerError() *ListScheduleInternalServerError {

	return &ListScheduleInternalServerError{}
}

// WithPayload adds the payload to the list schedule internal server error response
func (o *ListScheduleInternalServerError) WithPayload(payload *models.ErrorModel) *ListScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedule internal server error response
func (o *ListScheduleInternalServerError) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
