// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchCCHistoryHandlerFunc turns a function with the right signature into a search c c history handler
type SearchCCHistoryHandlerFunc func(SearchCCHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchCCHistoryHandlerFunc) Handle(params SearchCCHistoryParams) middleware.Responder {
	return fn(params)
}

// SearchCCHistoryHandler interface for that can handle valid search c c history params
type SearchCCHistoryHandler interface {
	Handle(SearchCCHistoryParams) middleware.Responder
}

// NewSearchCCHistory creates a new http.Handler for the search c c history operation
func NewSearchCCHistory(ctx *middleware.Context, handler SearchCCHistoryHandler) *SearchCCHistory {
	return &SearchCCHistory{Context: ctx, Handler: handler}
}

/* SearchCCHistory swagger:route GET /cc_history_search searchCCHistory

cc历史信息模糊搜索

*/
type SearchCCHistory struct {
	Context *middleware.Context
	Handler SearchCCHistoryHandler
}

func (o *SearchCCHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchCCHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
