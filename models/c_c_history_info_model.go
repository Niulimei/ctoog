// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CCHistoryInfoModel c c history info model
//
// swagger:model CCHistoryInfoModel
type CCHistoryInfoModel struct {

	// count
	Count int64 `json:"count,omitempty"`

	// info item
	InfoItem []*CCHistoryInfoModelItem `json:"infoItem"`

	// limit
	Limit int64 `json:"limit,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`
}

// Validate validates this c c history info model
func (m *CCHistoryInfoModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfoItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CCHistoryInfoModel) validateInfoItem(formats strfmt.Registry) error {
	if swag.IsZero(m.InfoItem) { // not required
		return nil
	}

	for i := 0; i < len(m.InfoItem); i++ {
		if swag.IsZero(m.InfoItem[i]) { // not required
			continue
		}

		if m.InfoItem[i] != nil {
			if err := m.InfoItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infoItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this c c history info model based on the context it is used
func (m *CCHistoryInfoModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfoItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CCHistoryInfoModel) contextValidateInfoItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InfoItem); i++ {

		if m.InfoItem[i] != nil {
			if err := m.InfoItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infoItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CCHistoryInfoModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CCHistoryInfoModel) UnmarshalBinary(b []byte) error {
	var res CCHistoryInfoModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
